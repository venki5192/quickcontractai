"use client";

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { ArrowLeftIcon, ArrowDownTrayIcon } from '@heroicons/react/24/outline';
import { PDFDownloadLink } from '@react-pdf/renderer';
import { ReportPDF } from '@/components/ReportPDF';

interface Report {
  id: string;
  filename: string;
  created_at: string;
  analysis_results: string;
  risk_level: 'low' | 'medium' | 'high';
  score: number;
}

export default function ReportPage() {
  const [report, setReport] = useState<Report | null>(null);
  const params = useParams();
  const supabase = createClientComponentClient();
  const router = useRouter();

  useEffect(() => {
    async function fetchReport() {
      const { data, error } = await supabase
        .from('documents')
        .select('*')
        .eq('id', params.id)
        .single();

      if (data) {
        if (!data.score && data.analysis_results) {
          const scoreMatch = data.analysis_results.match(/Numerical Score:\s*(\d+)/i);
          data.score = scoreMatch ? parseInt(scoreMatch[1]) : 0;
        }
        setReport(data as Report);
      }
    }

    fetchReport();
  }, [params.id, supabase]);

  const formatAnalysisContent = (content: string) => {
    return content.split('\n').map(line => {
      // Remove emojis and clean up formatting
      line = line
        .replace(/🔍|📋|📝|✍️|⚖️|[*]/g, '') // Remove all emojis
        .replace(/DETAILED ANALYSIS/g, 'DETAILED ANALYSIS')
        .replace(/FINAL VERDICT/g, 'FINAL VERDICT')
        .trim();
      
      if (line.match(/^\d+\./)) {
        // Section headers
        const [number, ...rest] = line.split('.');
        const score = rest.join('.').match(/\[(\d+)\/(\d+)\]/);
        return {
          type: 'header',
          content: rest.join('.').replace(/\[\d+\/\d+\]/, '').trim(),
          number,
          score
        };
      } else if (line.includes(':')) {
        // Key-value pairs
        const [key, ...value] = line.split(':');
        return {
          type: 'detail',
          key: key.trim(),
          value: value.join(':').trim()
        };
      }
      return { type: 'text', content: line.trim() };
    }).filter(item => 
      item.type === 'text' ? (item.content?.length ?? 0) > 0 : true
    );
  };

  const disclaimer = `
    DISCLAIMER: This analysis is provided for informational purposes only and should not be considered legal advice. 
    We recommend consulting with qualified legal professionals before making any decisions based on this report. 
    Generated by QuickContractAI on ${new Date().toLocaleDateString()}.
  `;

  if (!report) return null;

  return (
    <div className="min-h-screen bg-black">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <button
            onClick={() => router.push('/dashboard')}
            className="flex items-center gap-2 text-[#8491A5] hover:text-white transition-colors"
          >
            <ArrowLeftIcon className="w-5 h-5" />
            <span>Back to Dashboard</span>
          </button>

          <PDFDownloadLink
            document={<ReportPDF report={report} disclaimer={disclaimer} />}
            fileName={`${report.filename}-analysis.pdf`}
          >
            {({ loading }) => (
              <button 
                className="flex items-center gap-2 text-[#8491A5] hover:text-white transition-colors disabled:opacity-50"
                disabled={loading}
              >
                <ArrowDownTrayIcon className="w-5 h-5" />
                <span>{loading ? 'Preparing...' : 'Export PDF'}</span>
              </button>
            )}
          </PDFDownloadLink>
        </div>

        {/* Score Card */}
        <div className="bg-[#0A0A0A] border border-[#1D2839] rounded-xl p-6 mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-8">
              <div className="text-center">
                <div className="text-4xl font-bold mb-2">
                  <span className={
                    report.score >= 70 ? 'text-green-500' :
                    report.score >= 40 ? 'text-yellow-500' :
                    'text-red-500'
                  }>
                    {report.score}
                  </span>
                  <span className="text-[#8491A5] text-2xl">/100</span>
                </div>
                <div className="text-sm text-[#8491A5]">Contract Score</div>
              </div>

              <div className="h-12 w-px bg-[#1D2839]" />

              <div>
                <div className={`text-lg font-semibold mb-1 ${
                  report.risk_level === 'low' ? 'text-green-500' :
                  report.risk_level === 'medium' ? 'text-yellow-500' :
                  'text-red-500'
                }`}>
                  {report.risk_level.toUpperCase()} RISK
                </div>
                <div className="text-sm text-[#8491A5]">Risk Assessment</div>
              </div>
            </div>

            <div className="text-right">
              <h2 className="text-lg font-medium text-white mb-1">{report.filename}</h2>
              <p className="text-sm text-[#8491A5]">
                {new Date(report.created_at).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>

        {/* Analysis Content */}
        <div className="bg-[#0A0A0A] border border-[#1D2839] rounded-xl p-6">
          {formatAnalysisContent(report.analysis_results).map((item, index) => {
            switch (item.type) {
              case 'header':
                return (
                  <div key={index} className="flex items-center justify-between mt-8 first:mt-0 mb-4">
                    <h3 className="text-xl font-bold text-white">
                      {item.number}. {item.content}
                    </h3>
                    {item.score && (
                      <span className="text-[#8491A5] text-sm">
                        [{item.score[1]}/{item.score[2]}]
                      </span>
                    )}
                  </div>
                );
              case 'detail':
                return (
                  <div key={index} className="ml-6 mb-3">
                    <span className="font-medium text-white">{item.key}:</span>
                    <span className="text-[#8491A5] ml-2">{item.value}</span>
                  </div>
                );
              default:
                return (
                  <p key={index} className="text-[#8491A5] mb-4">{item.content}</p>
                );
            }
          })}

          {/* Disclaimer */}
          <div className="mt-8 pt-8 border-t border-[#1D2839]">
            <p className="text-sm text-[#8491A5] italic">
              {disclaimer}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
